1.Preparing Data

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import metrics

df = pd.read_csv("/content/group6medicaldataset - Copy.csv")
df

df.shape

df.tail()

df.isnull().sum()

sns.set()
plt.figure(figsize=(6,6))
sns.distplot(df['age'])
plt.title('Age Distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='sex', data=df)
plt.title('Sex Distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(df['bmi'])
plt.title('BMI Distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='children', data=df)
plt.title('Children')
plt.show()


plt.figure(figsize=(6,6))
sns.countplot(x='smoker', data=df)
plt.title('smoker')
plt.show()


plt.figure(figsize=(6,6))
sns.countplot(x='region', data=df)
plt.title('region')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='alcoholic', data=df)
plt.title('alcoholic')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='heart disease', data=df)
plt.title('heart disease')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='BP', data=df)
plt.title('BP')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='Pre existing disease', data=df)
plt.title('Pre existing disease')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='surgeries', data=df)
plt.title('surgeries')
plt.show()

df["sex"].value_counts()

df["smoker"].value_counts()

df["region"].value_counts()

df["alcoholic"].value_counts()

df["diabetic"].value_counts()

df["heart disease"].value_counts()

df["BP"].value_counts()

df["Pre existing disease"].value_counts()

df["surgeries"].value_counts()

df.replace({"sex":{"male":0,"female":1},
            "smoker":{"yes":0,"no":1},
            "region":{"southeast":0,"southwest":1,"northwest":2,"northeast":3},
            "alcoholic":{"yes":0,"no":1},
            "diabetic":{"yes":0,"no":1},
            "heart disease":{"yes":0,"no":1},
            "BP":{"yes":0,"no":1},
            "Pre existing disease":{"yes":0,"no":1},
            "surgeries":{"yes":0,"no":1}
            },inplace=True)
df

x = df.drop(columns='premium', axis=1)
y = df['premium']

Training Data

Train Test Split

x_train,x_test,y_train,y_test = train_test_split(x,y,train_size=0.1,random_state=42)

x_train.shape

y_train.shape

x_test.shape

y_test.shape

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

x_test

Building the model

1)Multiple linear regression

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Create and fit the linear regression model
lr = LinearRegression()
lr.fit(x, y)

# Predict the target variable
y_pred = lr.predict(x)

# Calculate the mean squared error (MSE)
mse = mean_squared_error(y, y_pred)

# Calculate the root mean squared error (RMSE)
rmse = mse ** 0.5

# Calculate the R-squared (accuracy) score
accuracy = lr.score(x, y)

print("Mean Squared Error (MSE): {:.2f}".format(mse))
print("Root Mean Squared Error (RMSE): {:.2f}".format(rmse))
print("R-squared (Accuracy): {:.2f}".format(accuracy))

2)Random forest regression


from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

# Assume x and y are your feature matrix and target variable

# Scale the data using StandardScaler
scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)

# Create a Random Forest regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the Random Forest model
rf.fit(x_scaled, y)

# Get the feature importances
importances = rf.feature_importances_

# Select the top 5 most important features
idx = importances.argsort()[-5:]
x_selected = x_scaled[:, idx]

# Create and fit a new Random Forest model with the selected features
rf_selected = RandomForestRegressor(n_estimators=100, random_state=42)
rf_selected.fit(x_selected, y)

# Predict the target variable
y_pred = rf_selected.predict(x_selected)

# Calculate the mean squared error (MSE)
mse = mean_squared_error(y, y_pred)

# Calculate the root mean squared error (RMSE)9
rmse = mse ** 0.5

# Calculate the R-squared (accuracy) score
accuracy = rf_selected.score(x_selected, y)

print("Mean Squared Error (MSE): {:.2f}".format(mse))
print("Root Mean Squared Error (RMSE): {:.2f}".format(rmse))
print("R-squared (Accuracy): {:.2f}".format(accuracy))

import matplotlib.pyplot as plt

# Define the data for the graph
models = ['Multiple Linear Regression', 'Random Forest Regressor']
#mse_values = [22548711.96,5575653.47]
#rmse_values = [4748.55,2361.28]
r2_values = [0.63,0.91]

# Create a figure and axis object
fig, ax = plt.subplots()

# Plot the MSE values
#ax.plot(models, mse_values, marker='o', label='Mean Squared Error (MSE)')

# Plot the RMSE values
#ax.plot(models, rmse_values, marker='o', label='Root Mean Squared Error (RMSE)')

# Plot the R2 values
ax.plot(models, r2_values, marker='o', label='R-squared (Accuracy)')

# Set the title and labels
ax.set_title('Comparison of Multiple Linear Regression and Random Forest Regressor Models')
ax.set_xlabel('Model')
ax.set_ylabel('Value')

# Add a legend
ax.legend()

# Show the plot
plt.show()

Predict charges for a new customer
Yes=0,No=1

input_data = [[50,1,40.4,1,1,3,1,1,1,1,1,1]]

rf.predict(sc.transform(input_data))

input_data=[[70,2,40,1,1,3,0,0,0,0,0,0]]
rf.predict(sc.transform(input_data))
